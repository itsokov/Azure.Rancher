---
# tasks file for role_vault_install
#todo unseal vault

# Add group
- name: Add Consul group
  group:
    name: "{{ consul_group }}"
    state: present

- name: Add Vault group
  group:
    name: "{{ vault_group }}"
    state: present

# Add user
- name: Add Consul user
  user:
    name: "{{ consul_user }}"
    comment: "Consul user"
    group: "{{ consul_group }}"
    system: true

- name: Add Vault user
  user:
    name: "{{ vault_user }}"
    comment: "Vault user"
    group: "{{ vault_group }}"
    system: true

- name: Install OS packages
  package:
    name: "{{ item }}"
    state: present
  with_items: "unzip"
  tags: installation

- name: Validate remote Consul directory
  file:
    path: /tmp/consul
    state: directory
    mode: 0700

- name: Read Consul package checksum file
  stat:
    path: "/tmp/consul/consul_{{ consul_version }}_SHA256SUMS"
  register: consul_checksum
  changed_when: false
  tags: installation

- name: Download Consul package checksum file
  get_url:
    url: "{{ consul_checksum_file_url }}"
    dest: "/tmp/consul/consul_{{ consul_version }}_SHA256SUMS"
    validate_certs: false
  tags: installation
  when: not consul_checksum.stat.exists | bool

- name: Read Consul package checksum
  shell: "grep {{ consul_pkg }} /tmp/consul/consul_{{ consul_version }}_SHA256SUMS"
  register: consul_sha256
  changed_when: false
  tags:
    - installation
    - skip_ansible_lint

- name: Check Consul package file
  stat:
    path: "/tmp/consul/{{ consul_pkg }}"
  register: consul_package
  tags: installation

- name: Download Consul
  get_url:
    url: "{{ consul_zip_url }}"
    dest: "/tmp/consul/{{ consul_pkg }}"
    checksum: "sha256:{{ consul_sha256.stdout.split(' ')|first }}"
    timeout: 42
  register: consul_download
  tags: installation

- name: Unarchive Consul and install binary
  unarchive:
    remote_src: true
    src: "/tmp/consul/{{ consul_pkg }}"
    dest: "{{ consul_bin_path }}"
    owner: "{{ consul_user }}"
    group: "{{ consul_group }}"
    mode: 0755
  notify:
    - restart consul
  when: consul_download is changed
  tags: installation

- name: Cleanup
  file:
    path: "/tmp/consul"
    state: absent
  tags: installation

#Vault install

- name: Ensure remote vault dir exists
  file:
    path: /tmp/vault
    state: directory
    mode: 0750

- name: Check Vault package checksum file
  stat:
    path: "/tmp/vault/{{ vault_shasums }}"
  register: vault_checksum

- name: Get Vault package checksum file
  get_url:
    url: "{{ vault_checksum_file_url }}"
    dest: "/tmp/vault/{{ vault_shasums }}"
  tags: installation
  when: not vault_checksum.stat.exists | bool

- name: Get Vault package checksum
  shell: "grep {{ vault_pkg }} /tmp/vault/{{ vault_shasums }}"
  register: vault_sha256
  tags:
    - installation
    - skip_ansible_lint

- name: Check Vault package file
  stat:
    path: "/tmp/vault/{{ vault_pkg }}"
  register: vault_package
  tags: installation

- name: "Download Vault â†’ {{ vault_zip_url }}"
  get_url:
    url: "{{ vault_zip_url }}"
    dest: "/tmp/vault/{{ vault_pkg }}"
    checksum: "sha256:{{ vault_sha256.stdout.split(' ')|first }}"
    timeout: "42"
  tags: installation
  when: not vault_package.stat.exists | bool

- name: Unarchive Vault and install binary
  unarchive:
    remote_src: true
    src: "/tmp/vault/{{ vault_pkg }}"
    dest: "{{ vault_bin_path }}"
    owner: "{{ vault_user }}"
    group: "{{ vault_group }}"
    mode: "0755"
  notify: restart vault
  tags: installation



# Consul directories

- name: Create directories
  block:
  - name: Configuration and data directories
    file:
      dest: "{{ item }}"
      state: directory
      owner: "{{ consul_user }}"
      group: "{{ consul_group }}"
      mode: 0700
    with_items:
      - "{{ consul_config_path }}"
      - "{{ consul_data_path }}"


#Vault directories
- name: Create directories
  become: true
  file:
    dest: "{{ item }}"
    state: directory
    owner: "{{ vault_user }}"
    group: "{{ vault_group }}"
    mode: 0750
  with_items:
    - "{{ vault_config_path }}"
    - "{{ vault_data_path }}"
    - "{{ vault_run_path }}"

- name: Verify binary path
  file:
    path: "{{ consul_bin_path }}"
    state: directory
    owner: root
    mode: 0755
  when: ansible_os_family != 'Windows'



- name: Create consul configuration
  template:
    dest: "{{ item.dest }}"
    owner: "{{ consul_user }}"
    group: "{{ consul_group }}"
    src: "{{ item.src }}"
    mode: 0600
  with_items:
    - dest: "{{ consul_config_path }}/consul-server.json"
      src: "consul-server.json.j2"

    - dest: "/etc/systemd/system/consul.service"
      src: "consul.service.j2"

- name: Create vault configuration
  template:
    dest: "{{ item.dest }}"
    owner: "{{ vault_user }}"
    group: "{{ vault_group }}"
    src: "{{ item.src }}"
    mode: 0600
  with_items:
    - dest: "/etc/systemd/system/vault.service"
      src: "vault.service.j2"
    - dest: "{{ vault_config_path }}/vault_server.hcl"
      src: "vault_server.hcl.j2"
  notify:
    - restart consul
    - restart vault


- name: Create cert_public_key file
  copy:
    content: "{{ cert_public_key }}"
    dest: "{{ vault_config_path }}/tls.crt"
    mode: 0600
    owner: "{{ vault_user }}"
    group: "{{ vault_group }}"

- name: Create cert_private_key file
  copy:
    content: "{{ cert_private_key }}"
    dest: "{{ vault_config_path }}/tls.key"
    mode: 0600
    owner: "{{ vault_user }}"
    group: "{{ vault_group }}"

- name: Create ca_cert_pem file
  copy:
    content: "{{ ca_cert_pem }}"
    dest: "{{ vault_config_path }}/cacerts.pem"
    mode: 0600
    owner: "{{ vault_user }}"
    group: "{{ vault_group }}"



- name: Flush handlers
  meta: flush_handlers

- name: Sleep for 30 seconds and continue with play
  wait_for:
    timeout: 30

#todo add lineinfile /etc/environment VAULT_ADDR=http://127.0.0.1:8200

- name: Ensure vault client connects without https
  ansible.builtin.lineinfile:
    path: /etc/environment
    line: VAULT_ADDR=http://127.0.0.1:8200
    
- name: Initialize Vault
  shell: |
    vault operator init \
        -key-shares=1 \
        -key-threshold=1 
  register: vault_init
  environment:
    VAULT_ADDR: http://127.0.0.1:8200

- name: Output result of vault init
  debug: 
    msg: "{{ vault_init }}"


